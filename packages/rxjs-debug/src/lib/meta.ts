import {asapScheduler, of, Subject} from 'rxjs';
import {
  audit,
  buffer,
  bufferCount,
  bufferTime,
  bufferToggle,
  bufferWhen,
  catchError,
  combineLatestAll,
  combineLatest,
  concat,
  count,
  debounce,
  debounceTime,
  defaultIfEmpty,
  delay,
  delayWhen,
  dematerialize,
  distinct,
  distinctUntilChanged,
  elementAt,
  endWith,
  every,
  exhaustAll,
  exhaustMap,
  expand,
  filter,
  finalize,
  find,
  findIndex,
  first,
  groupBy,
  ignoreElements,
  isEmpty,
  last,
  map,
  mapTo,
  materialize,
  merge,
  mergeMap,
  mergeScan,
  multicast,
  observeOn,
  onErrorResumeNext,
  pairwise,
  partition,
  pluck,
  publishBehavior,
  publishLast,
  publishReplay,
  race,
  reduce,
  refCount,
  repeat,
  repeatWhen,
  retry,
  retryWhen,
  sample,
  sampleTime,
  scan,
  sequenceEqual,
  share,
  shareReplay,
  single,
  skip,
  skipLast,
  skipUntil,
  skipWhile,
  startWith,
  subscribeOn,
  switchMap,
  take,
  takeLast,
  takeUntil,
  takeWhile,
  tap,
  throttle,
  throttleTime,
  throwIfEmpty,
  timeInterval,
  timeoutWith,
  toArray,
  windowCount,
  windowTime,
  windowToggle,
  windowWhen,
  withLatestFrom,
  zip,
  zipAll,
} from 'rxjs/operators';

const NUM = 5;
const OF$ = of(1);
const MAPPER = () => OF$;
const NOOP = (...args: any[]): any => {};

const OPERATORS_BY_CATEGORY = {
  conditional: ['defaultIfEmpty', 'every', 'find', 'findIndex', 'isEmpty', 'throwIfEmpty'],
  errorHandling: ['catchError', 'retry', 'retryWhen', 'onErrorResumeNext'],
  filter: [
    'take',
    'takeLast',
    'takeUntil',
    'takeWhile',
    'audit',
    'debounce',
    'debounceTime',
    'distinct',
    'distinctUntilChanged',
    'elementAt',
    'filter',
    'first',
    'ignoreElements',
    'last',
    'sample',
    'sampleTime',
    'single',
    'skip',
    'skipLast',
    'skipUntil',
    'skipWhile',
    'throttle',
    'throttleTime',
  ],
  join: ['combineLatestAll', 'startWith', 'exhaustAll', 'withLatestFrom', 'endWith'],
  joinCreation: ['combineLatest', 'concat', 'merge', 'partition', 'race', 'zip', 'zipAll'],
  mathAndAggregate: ['count', 'reduce'],
  multicast: [
    'share',
    'multicast',
    'shareReplay',
    'publishBehavior',
    'publishLast',
    'publishReplay',
  ],
  transformation: [
    'map',
    'mapTo',
    'buffer',
    'bufferCount',
    'bufferTime',
    'bufferToggle',
    'bufferWhen',
    'switchMap',
    'exhaustMap',
    'pairwise',
    'pluck',
    'scan',
    'expand',
    'groupBy',
    'mergeMap',
    'mergeScan',
    'windowCount',
    'windowTime',
    'windowToggle',
    'windowWhen',
  ],
  utility: [
    'delay',
    'delayWhen',
    'finalize',
    'dematerialize',
    'materialize',
    'tap',
    'observeOn',
    'refCount',
    'toArray',
    'repeat',
    'repeatWhen',
    'sequenceEqual',
    'subscribeOn',
    'timeInterval',
    'timeoutWith',
  ],
};

const COLOR_GENERATORS_BY_CATEGORY = {
  conditional: a => `rgba(200,200,200,${a || 1})`,
  errorHandling: a => `rgba(255,0,120,${a || 1})`,
  filter: a => `rgba(255,255,0,${a || 1})`,
  join: a => `rgba(0,125,255,${a || 1})`,
  joinCreation: a => `rgba(255,100,0,${a || 1})`,
  mathAndAggregate: a => `rgba(200,200,200,${a || 1})`,
  multicast: a => `rgba(0,255,217,${a || 1})`,
  transformation: a => `rgba(17,255,0,${a || 1})`,
  utility: a => `rgba(245,0,255,${a || 1})`,
};

export const OPERATORS_BY_RETURNED_FN_BODY = {
  [String(audit(MAPPER))]: 'audit',
  // [String(auditTime(NUM))]: 'auditTime', // audit
  [String(buffer(OF$))]: 'buffer',
  [String(bufferCount(NUM))]: 'bufferCount',
  [String(bufferTime(NUM))]: 'bufferTime',
  [String(bufferToggle(OF$, MAPPER))]: 'bufferToggle',
  [String(bufferWhen(MAPPER))]: 'bufferWhen',
  [String(catchError(MAPPER))]: 'catchError',
  [String(combineLatestAll())]: 'combineLatestAll',
  [String(combineLatest([OF$]))]: 'combineLatest',
  [String(concat())]: 'concat',
  // [String(concatAll())]: 'concatAll', // mergeMap
  // [String(concatMap(MAPPER))]: 'concatMap', // mergeMap
  // [String(concatMapTo(MAPPER))]: 'concatMapTo', // mergeMap
  [String(count())]: 'count',
  [String(debounce(MAPPER))]: 'debounce',
  [String(debounceTime(NUM))]: 'debounceTime',
  [String(defaultIfEmpty(undefined))]: 'defaultIfEmpty',
  [String(delay(NUM))]: 'delay',
  [String(delayWhen(MAPPER))]: 'delayWhen',
  [String(dematerialize())]: 'dematerialize',
  [String(distinct())]: 'distinct',
  [String(distinctUntilChanged())]: 'distinctUntilChanged',
  // [String(distinctUntilKeyChanged<[]>(NUM))]: 'distinctUntilKeyChanged', // distinctUntilChanged
  [String(elementAt(NUM))]: 'elementAt',
  [String(endWith())]: 'endWith',
  [String(every(NOOP))]: 'every',
  [String(exhaustAll())]: 'exhaustAll',
  [String(exhaustMap(MAPPER))]: 'exhaustMap',
  [String(expand(MAPPER))]: 'expand',
  [String(filter(NOOP))]: 'filter',
  [String(finalize(MAPPER))]: 'finalize',
  [String(find(NOOP))]: 'find',
  [String(findIndex(NOOP))]: 'findIndex',
  [String(first())]: 'first',
  [String(groupBy(MAPPER))]: 'groupBy',
  [String(ignoreElements())]: 'ignoreElements',
  [String(isEmpty())]: 'isEmpty',
  [String(last())]: 'last',
  [String(map(MAPPER))]: 'map',
  [String(mapTo(MAPPER))]: 'mapTo',
  [String(materialize())]: 'materialize',
  // [String(max())]: 'max', // reduce
  [String(merge())]: 'merge',
  // [String(mergeAll())]: 'mergeAll', // mergeMap
  [String(mergeMap(MAPPER))]: 'mergeMap',
  // [String(flatMap(MAPPER))]: 'flatMap', // mergeMap
  // [String(mergeMapTo(MAPPER))]: 'mergeMapTo', // mergeMap
  [String(mergeScan(MAPPER, NUM))]: 'mergeScan',
  // [String(min())]: 'min', // reduce
  [String(multicast(new Subject()))]: 'multicast',
  [String(observeOn(asapScheduler))]: 'observeOn',
  [String(onErrorResumeNext())]: 'onErrorResumeNext',
  [String(pairwise())]: 'pairwise',
  [String(partition(NOOP))]: 'partition',
  [String(pluck(''))]: 'pluck',
  // [String(publish())]: 'publish', // multicast
  [String(publishBehavior(MAPPER))]: 'publishBehavior',
  [String(publishLast())]: 'publishLast',
  [String(publishReplay())]: 'publishReplay',
  [String(race())]: 'race',
  [String(reduce(MAPPER))]: 'reduce',
  [String(repeat())]: 'repeat',
  [String(repeatWhen(MAPPER))]: 'repeatWhen',
  [String(retry())]: 'retry',
  [String(retryWhen(MAPPER))]: 'retryWhen',
  [String(refCount())]: 'refCount',
  [String(sample(OF$))]: 'sample',
  [String(sampleTime(NUM))]: 'sampleTime',
  [String(scan(MAPPER))]: 'scan',
  [String(sequenceEqual(OF$))]: 'sequenceEqual',
  [String(share())]: 'share',
  [String(shareReplay())]: 'shareReplay',
  [String(single())]: 'single',
  [String(skip(NUM))]: 'skip',
  [String(skipLast(NUM))]: 'skipLast',
  [String(skipUntil(OF$))]: 'skipUntil',
  [String(skipWhile(NOOP))]: 'skipWhile',
  [String(startWith(MAPPER))]: 'startWith',
  [String(subscribeOn(asapScheduler))]: 'subscribeOn',
  // [String(switchAll())]: 'switchAll', // switchMap
  [String(switchMap(MAPPER))]: 'switchMap',
  // [String(switchMapTo(OF$))]: 'switchMapTo', // switchMap
  [String(take(NUM))]: 'take',
  [String(takeLast(NUM))]: 'takeLast',
  [String(takeUntil(OF$))]: 'takeUntil',
  [String(takeWhile(NOOP))]: 'takeWhile',
  [String(tap(MAPPER))]: 'tap',
  [String(throttle(MAPPER))]: 'throttle',
  [String(throttleTime(NUM))]: 'throttleTime',
  [String(throwIfEmpty(MAPPER))]: 'throwIfEmpty',
  [String(timeInterval(asapScheduler))]: 'timeInterval',
  // [String(timeout(NUM))]: 'timeout', // timeoutWith
  [String(timeoutWith(NUM, OF$))]: 'timeoutWith',
  // [String(timestamp(asapScheduler))]: 'timestamp', // map
  [String(toArray())]: 'toArray',
  [String(windowCount(NUM))]: 'windowCount',
  [String(windowTime(NUM))]: 'windowTime',
  [String(windowToggle(OF$, MAPPER))]: 'windowToggle',
  [String(windowWhen(MAPPER))]: 'windowWhen',
  [String(withLatestFrom())]: 'withLatestFrom',
  [String(zip())]: 'zip',
  [String(zipAll())]: 'zipAll',
};

export const COLORS_BY_OPERATOR = {
  source: 'rgb(240,240,240)',
};

Object.entries(OPERATORS_BY_CATEGORY).forEach(([cat, ops]) => {
  const span = 0.3 / ops.length;
  ops.forEach((op, i) => {
    COLORS_BY_OPERATOR[op] = COLOR_GENERATORS_BY_CATEGORY[cat]((1 - span * i).toFixed(2));
    /*console.log(
      `%c ${op} `,
      `background-color: #000; padding: 3px; border-radius: 6px;color: ${colorGenByCat[cat](
        1 - span * i
      )}`
    );*/
  });
});
